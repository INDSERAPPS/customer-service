<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
       http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!--
            This will automatically locate any and all property files you have
            within your classpath, provided they fall under the META-INF
            directory. The located property files are parsed and their values can
            then be used within application context files in the form of
            ${propertyKey}.
            <context:property-placeholder location="classpath*:*.properties"/>
    -->

    <!--
            This declaration will cause Spring to locate every @Component,
            @Repository and @Service in your application. In practical terms this
            allows you to write a POJO and then simply annotate the new POJO as an
            @Service and Spring will automatically detect, instantiate and
            dependency inject your service at startup time. Importantly, you can
            then also have your new service injected into any other class that
            requires it simply by declaring a field for your service inside the
            relying class and Spring will inject it. Note that two exclude filters
            are declared. The first ensures that Spring doesn't 	spend time
            introspecting Roo-specific ITD aspects. The second ensures Roo doesn't
            instantiate your @Controller classes, as these should be instantiated
            by a web tier application context. Refer to web.xml for more details
            about the web tier application context setup services. Furthermore,
            this turns on @Autowired, @PostConstruct etc support. These
            annotations allow you to use common Spring and Java Enterprise Edition
            annotations in your classes without needing to do any special
            configuration. The most commonly used annotation is @Autowired, which
            instructs Spring to dependency inject an object into your class.
    -->

    <context:component-scan base-package="com.customer.*">
       <!-- <context:exclude-filter expression="com.customer.controller.*" type="annotation"/> -->
    </context:component-scan>
    <mvc:annotation-driven/>

    <task:annotation-driven />
    <context:annotation-config/>
    <!--necessary to process @PersistenceContext, this annotation conveniently activates a number of post-processors instead of having to list them explicitly-->
    
    <!-- <aop:aspectj-autoproxy/> -->
   
  <!--  <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
            </list>
        </property>
    </bean> -->

   <!--  <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
    
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="generateDdl" value="false"/>
        <property name="showSql" value="false"/>
        <property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect"/>
        <property name="database" value="ORACLE"/>
    </bean>
  
     <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="emt4"/>
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
    </bean> 
    
    Register JTA transaction manager.
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" />
    <tx:annotation-driven transaction-manager="transactionManager" />  -->   


    

    

</beans>